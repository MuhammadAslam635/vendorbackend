generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                    Int                @id @default(autoincrement())
  name                  String
  email                 String             @unique
  password              String
  phone                 String?
  email_verification_at DateTime?
  utype                 UserType           @default(VENDOR)
  status                UserStatus         @default(PENDING)
  packageActive         String             @default("NO")
  totalzipcodes         Int?               @default(0)
  addedzipcodes         Int?               @default(0)
  about                 String?
  company               String?
  state                 String?
  city                  String?
  address               String?
  country               String?
  companyLogo           String?
  fb                    String?
  ln                    String?
  in                    String?
  yt                    String?
  webUrl                String?
  createdAt             DateTime           @default(now())
  updatedAt             DateTime           @updatedAt
  access_tokens         AccessToken[]
  subscribe_packages    SubscribePackage[]
  transactions          Transaction[]
  zipcodes              ZipCode[]
  gallery               Gallery[]
  permissions           Permission[]
  routes                Route[]
  chats                 Chat[]             @relation("UserChats")
  messages              Message[]
  adminChats            Chat[]             @relation("AdminChats")
  createdPromos         Promo[]
}
model Route{
  id        Int            @id @default(autoincrement())
  userId    Int     
  user      User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  name      String @default("/admin/packages")
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
  
  @@unique([userId, name])
  @@map("routes")
}

model Permission {
  id        Int            @id @default(autoincrement())
  userId    Int     
  user      User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  name      PermissionType @default(Approval)
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
  
  @@unique([userId, name])
  @@map("permissions")
}

model Chat {
  id        Int        @id @default(autoincrement())
  userId    Int
  user      User       @relation("UserChats", fields: [userId], references: [id], onDelete: Cascade)
  adminId   Int?
  admin     User?       @relation("AdminChats", fields: [adminId], references: [id], onDelete: Cascade)
  title     String?    @default("Support Chat")
  status    ChatStatus @default(OPEN)
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  messages  Message[]

  @@index([userId])
  @@index([adminId])
}

model Message {
  id          Int         @id @default(autoincrement())
  chatId      Int
  chat        Chat        @relation(fields: [chatId], references: [id], onDelete: Cascade)
  userId      Int
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  content     String
  attachments String?
  messageBy   MessageType @default(USER)
  isRead      Boolean     @default(false)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  @@index([chatId])
  @@index([userId])
}

model Gallery {
  id        Int      @id @default(autoincrement())
  image     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int

  @@index([userId])
}

model AccessToken {
  id            Int      @id @default(autoincrement())
  access_token  String   @unique
  refresh_token String?  @unique
  expires_at    DateTime
  userId        Int
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([access_token])
}

model ZipCode {
  id                 Int               @id @default(autoincrement())
  zipcode            String
  userId             Int
  subscribePackageId Int?
  createdAt          DateTime          @default(now())
  updatedAt          DateTime          @updatedAt
  user               User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  subscribe_package  SubscribePackage? @relation(fields: [subscribePackageId], references: [id])

  @@index([userId])
  @@index([subscribePackageId])
}

model Package {
  id                 Int                @id @default(autoincrement())
  name               String?
  price              Float              @default(150)
  duration           Int                @default(1)
  profiles           Int                @default(3)
  description        String?            @default("Best Package for your business \n Optimize and grow your business with our best package \n No 1 Package for your business")
  status             PackageStatus      @default(ACTIVE)
  createdAt          DateTime           @default(now())
  updatedAt          DateTime           @updatedAt
  subscribe_packages SubscribePackage[]
}

model SubscribePackage {
  id          Int          @id @default(autoincrement())
  startDate   DateTime     @default(now())
  endDate     DateTime
  status      String       @default("ACTIVE")
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  packageId   Int
  userId      Int
  package     Package      @relation(fields: [packageId], references: [id])
  user        User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  transaction Transaction?
  zipCodes    ZipCode[]

  @@index([packageId])
  @@index([userId])
}

model Transaction {
  id                 Int              @id @default(autoincrement())
  amount             Float
  paymentMethod      String
  paymentStatus      String           @default("PENDING")
  transactionId      String?          @unique
  createdAt          DateTime         @default(now())
  updatedAt          DateTime         @updatedAt
  subscribePackageId Int              @unique
  userId             Int
  subscribe_package  SubscribePackage @relation(fields: [subscribePackageId], references: [id])
  user               User             @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}
model Promo {
  id          Int         @id @default(autoincrement())
  title       String
  maxZipCode Int
  description String?
  code        String      @unique
  startDate   DateTime
  endDate     DateTime
  isActive    Boolean     @default(true)
  isSiteWide  Boolean     @default(false)
  createdBy   Int
  creator     User        @relation(fields: [createdBy], references: [id])
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  
  @@index([code])
  @@index([createdBy])
  @@index([startDate, endDate])
}
enum UserType {
  VENDOR
  SUBADMIN
  ADMIN
  SUPERADMIN
}

enum UserStatus {
  PENDING
  ACTIVE
  SUSPENDED
  BLOCKED
}

enum PackageStatus {
  ACTIVE
  INACTIVE
}

enum ChatStatus {
  OPEN
  INPROGRESS
  CLOSED
  RESOLVED
}

enum MessageType {
  USER
  ADMIN
  SUBADMIN
}

enum PermissionType {
  Approval
  Editing
  Deletion
}