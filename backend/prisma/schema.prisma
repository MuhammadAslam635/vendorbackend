generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                    Int                @id @default(autoincrement())
  name                  String
  email                 String             @unique
  password              String
  phone                 String?
  email_verification_at DateTime?
  utype                 String             @default("VENDOR")
  status                String             @default("PENDING")
  packageActive         String             @default("NO")
  totalzipcodes         Int?               @default(0)
  addedzipcodes         Int?               @default(0)
  about                 String?
  company               String?
  state                 String?
  city                  String?
  address               String?
  country               String?
  companyLogo           String?
  fb                    String?
  ln                    String?
  in                    String?
  yt                    String?
  webUrl                String?
  createdAt             DateTime           @default(now())
  updatedAt             DateTime           @updatedAt
  access_tokens         AccessToken[]
  subscribe_packages    SubscribePackage[]
  transactions          Transaction[]
  zipcodes              ZipCode[]
  gallery Gallery[]
}
model Gallery{
  id Int @id @default(autoincrement())
  image String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user User @relation(fields: [userId], references: [id])
  userId Int
}

model AccessToken {
  id            Int      @id @default(autoincrement())
  access_token  String   @unique
  refresh_token String?  @unique
  expires_at    DateTime
  userId        Int
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([access_token])
}

model ZipCode {
  id        Int      @id @default(autoincrement())
  zipcode   String
  userId    Int
  subscribePackageId  Int?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
  subscribe_package SubscribePackage? @relation(fields: [subscribePackageId], references: [id]) // Updated to optional relation

  @@index([userId])
}

model Package {
  id                 Int                @id @default(autoincrement())
  name               String?
  price              Float              @default(150)
  duration           Int                @default(1)
  profiles           Int                @default(3)
  description        String?            @default("Best Package for your business \n Optimize and grow your business with our best package \n No 1 Package for your business")
  status             String             @default("ACTIVE")
  createdAt          DateTime           @default(now())
  updatedAt          DateTime           @updatedAt
  subscribe_packages SubscribePackage[]
}

model SubscribePackage {
  id          Int          @id @default(autoincrement())
  startDate   DateTime     @default(now())
  endDate     DateTime
  status      String       @default("ACTIVE")
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  packageId   Int
  userId      Int
  package     Package      @relation(fields: [packageId], references: [id])
  user        User         @relation(fields: [userId], references: [id])
  transaction Transaction?
  zipCodes    ZipCode[]

  @@index([packageId])
  @@index([userId])
}

model Transaction {
  id                   Int              @id @default(autoincrement())
  amount               Float
  paymentMethod        String
  paymentStatus        String           @default("PENDING")
  transactionId        String?          @unique
  createdAt            DateTime         @default(now())
  updatedAt            DateTime         @updatedAt
  subscribePackageId Int              @unique
  userId               Int
  subscribe_package    SubscribePackage @relation(fields: [subscribePackageId], references: [id])
  user                 User             @relation(fields: [userId], references: [id])

  @@index([userId])
}

enum UserType {
  VENDOR
  CUSTOMER
  ADMIN
}

enum UserStatus {
  PENDING
  ACTIVE
  SUSPENDED
  BLOCKED
}

enum PackageStatus {
  ACTIVE
  INACTIVE
}
